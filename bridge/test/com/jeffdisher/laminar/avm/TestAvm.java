package com.jeffdisher.laminar.avm;

import java.util.List;
import java.util.UUID;

import org.junit.Assert;
import org.junit.Test;

import com.jeffdisher.laminar.contracts.DoNothing;
import com.jeffdisher.laminar.types.TopicName;
import com.jeffdisher.laminar.types.event.EventRecord;


public class TestAvm {
	@Test
	public void testStartStop() throws Throwable {
		// We just write out this JAR for testing later on (since integration can't use this AVM helper.
		AvmBridge bridge = new AvmBridge();
		bridge.shutdown();
	}

	@Test
	public void testDoNothing() throws Throwable {
		byte[] key = new byte[32];
		key[15] = 42;
		byte[] code = ContractPackager.createJarForClass(DoNothing.class);
		
		long termNumber = 1L;
		long globalOffset = 1L;
		long initialLocalOffset = 1L;
		UUID clientId = UUID.randomUUID();
		long clientNonce = 1L;
		
		TopicName topic = TopicName.fromString("test");
		byte[] value = new byte[] {1,2,3};
		AvmBridge bridge = new AvmBridge();
		
		TopicContext context = new TopicContext();
		List<EventRecord> records = bridge.runCreate(context, termNumber, globalOffset, initialLocalOffset, clientId, clientNonce, topic, code, new byte[0]);
		// No events generated by the contract on deployment.
		Assert.assertEquals(0, records.size());
		Assert.assertNotNull(context.transformedCode);
		Assert.assertNotNull(context.objectGraph);
		globalOffset += 1;
		clientNonce += 1;
		initialLocalOffset += records.size();
		
		// Sending a PUT or DELETE will do nothing - results in no events.
		records = bridge.runPut(context, termNumber, globalOffset, initialLocalOffset, clientId, clientNonce, topic, key, value);
		Assert.assertEquals(0, records.size());
		globalOffset += 1;
		clientNonce += 1;
		initialLocalOffset += records.size();
		
		// A DELETE should result in 1 event for that key.
		records = bridge.runDelete(context, termNumber, globalOffset, initialLocalOffset, clientId, clientNonce, topic, key);
		Assert.assertEquals(0, records.size());
		globalOffset += 1;
		clientNonce += 1;
		initialLocalOffset += records.size();
		
		bridge.shutdown();
	}
}
