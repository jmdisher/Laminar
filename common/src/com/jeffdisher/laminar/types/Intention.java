package com.jeffdisher.laminar.types;

import java.nio.ByteBuffer;
import java.util.UUID;

import com.jeffdisher.laminar.types.payload.IPayload;
import com.jeffdisher.laminar.types.payload.Payload_ConfigChange;
import com.jeffdisher.laminar.types.payload.Payload_TopicCreate;
import com.jeffdisher.laminar.types.payload.Payload_KeyDelete;
import com.jeffdisher.laminar.types.payload.Payload_Empty;
import com.jeffdisher.laminar.types.payload.Payload_KeyPut;
import com.jeffdisher.laminar.utils.Assert;


/**
 * Laminar is built on 2 kinds of data:
 * <ul>
 * <li>Intentions:  These are generated on the leader from valid ClientMessages.  They are written to the "input" stream
 *  when committing to disk.  They are sent to followers in the cluster.  They are sent to reconnecting clients.  In a
 *  sense, they are the "independent variables".</li>
 * <li>Consequences:  These are generated by every node in the cluster when processing an intention (when a node decides or is told
 *  that it should commit).  They are written to the "per-topic" stream when committing to disk.  They are only ever
 *  sent to listeners.  In a sense, they are the "dependent variables".  Note that, even though every node creates
 *  these, the mapping from the intention to consequence is deterministic so every node derives the same answer.</li>
 * </ul>
 * It is worth noting that that processing a single intention normally produces a single consequence but programmable topics
 * can work differently where a intention can result in 0 or several consequences being generated.
 * 
 * This class represents the logical representation of the intention, as well as its physical
 * serialization/deserialization logic.
 */
public final class Intention {
	public static Intention createTopic(long termNumber, long intentionOffset, TopicName topic, UUID clientId, long clientNonce, byte[] code, byte[] arguments) {
		// The offsets must be positive.
		Assert.assertTrue(termNumber > 0L);
		Assert.assertTrue(intentionOffset > 0L);
		Assert.assertTrue(null != topic);
		Assert.assertTrue(null != clientId);
		Assert.assertTrue(clientNonce >= 0L);
		Assert.assertTrue(null != code);
		Assert.assertTrue(null != arguments);
		return new Intention(Type.TOPIC_CREATE, termNumber, intentionOffset, topic, clientId, clientNonce, Payload_TopicCreate.create(code, arguments));
	}

	public static Intention destroyTopic(long termNumber, long intentionOffset, TopicName topic, UUID clientId, long clientNonce) {
		// The offsets must be positive.
		Assert.assertTrue(termNumber > 0L);
		Assert.assertTrue(intentionOffset > 0L);
		Assert.assertTrue(null != topic);
		Assert.assertTrue(null != clientId);
		Assert.assertTrue(clientNonce >= 0L);
		return new Intention(Type.TOPIC_DESTROY, termNumber, intentionOffset, topic, clientId, clientNonce, Payload_Empty.create());
	}

	public static Intention put(long termNumber, long intentionOffset, TopicName topic, UUID clientId, long clientNonce, byte[] key, byte[] value) {
		// The offsets must be positive.
		Assert.assertTrue(termNumber > 0L);
		Assert.assertTrue(intentionOffset > 0L);
		Assert.assertTrue(null != topic);
		Assert.assertTrue(null != clientId);
		Assert.assertTrue(clientNonce >= 0L);
		Assert.assertTrue(null != key);
		Assert.assertTrue(null != value);
		return new Intention(Type.KEY_PUT, termNumber, intentionOffset, topic, clientId, clientNonce, Payload_KeyPut.create(key, value));
	}

	public static Intention delete(long termNumber, long intentionOffset, TopicName topic, UUID clientId, long clientNonce, byte[] key) {
		// The offsets must be positive.
		Assert.assertTrue(termNumber > 0L);
		Assert.assertTrue(intentionOffset > 0L);
		Assert.assertTrue(null != topic);
		Assert.assertTrue(null != clientId);
		Assert.assertTrue(clientNonce >= 0L);
		Assert.assertTrue(null != key);
		return new Intention(Type.KEY_DELETE, termNumber, intentionOffset, topic, clientId, clientNonce, Payload_KeyDelete.create(key));
	}

	public static Intention updateConfig(long termNumber, long intentionOffset, UUID clientId, long clientNonce, ClusterConfig config) {
		// The offsets must be positive.
		Assert.assertTrue(termNumber > 0L);
		Assert.assertTrue(intentionOffset > 0L);
		Assert.assertTrue(null != clientId);
		Assert.assertTrue(clientNonce >= 0L);
		Assert.assertTrue(null != config);
		// UPDATE_CONFIG is not posted to a topic.
		TopicName topic = TopicName.syntheticTopic();
		return new Intention(Type.CONFIG_CHANGE, termNumber, intentionOffset, topic, clientId, clientNonce, Payload_ConfigChange.create(config));
	}

	public static Intention stutter(long termNumber, long intentionOffset, TopicName topic, UUID clientId, long clientNonce, byte[] key, byte[] value) {
		// The offsets must be positive.
		Assert.assertTrue(termNumber > 0L);
		Assert.assertTrue(intentionOffset > 0L);
		Assert.assertTrue(null != topic);
		Assert.assertTrue(null != clientId);
		Assert.assertTrue(clientNonce >= 0L);
		Assert.assertTrue(null != key);
		Assert.assertTrue(null != value);
		return new Intention(Type.STUTTER, termNumber, intentionOffset, topic, clientId, clientNonce, Payload_KeyPut.create(key, value));
	}

	public static Intention deserialize(byte[] serialized) {
		ByteBuffer wrapper = ByteBuffer.wrap(serialized);
		return _deserializeFrom(wrapper);
	}

	public static Intention deserializeFrom(ByteBuffer buffer) {
		return _deserializeFrom(buffer);
	}


	private static Intention _deserializeFrom(ByteBuffer buffer) {
		int ordinal = (int) buffer.get();
		if (ordinal >= Type.values().length) {
			throw Assert.unimplemented("Handle corrupt message");
		}
		Type type = Type.values()[ordinal];
		long termNumber = buffer.getLong();
		long intentionOffset = buffer.getLong();
		TopicName topic = TopicName.deserializeFrom(buffer);
		UUID clientId = new UUID(buffer.getLong(), buffer.getLong());
		long clientNonce = buffer.getLong();
		IPayload payload;
		switch (type) {
		case INVALID:
			throw Assert.unimplemented("Handle invalid deserialization");
		case TOPIC_CREATE:
			payload = Payload_TopicCreate.deserialize(buffer);
			break;
		case TOPIC_DESTROY:
			payload = Payload_Empty.deserialize(buffer);
			break;
		case KEY_PUT:
			payload = Payload_KeyPut.deserialize(buffer);
			break;
		case KEY_DELETE:
			payload = Payload_KeyDelete.deserialize(buffer);
			break;
		case CONFIG_CHANGE:
			payload = Payload_ConfigChange.deserialize(buffer);
			break;
		case STUTTER:
			payload = Payload_KeyPut.deserialize(buffer);
			break;
		default:
			throw Assert.unreachable("Unmatched deserialization type");
		}
		return new Intention(type, termNumber, intentionOffset, topic, clientId, clientNonce, payload);
	}


	public final Type type;
	public final long termNumber;
	public final long intentionOffset;
	public final TopicName topic;
	public final UUID clientId;
	public final long clientNonce;
	public final IPayload payload;
	
	private Intention(Type type, long termNumber, long intentionOffset, TopicName topic, UUID clientId, long clientNonce, IPayload payload) {
		this.type = type;
		this.termNumber = termNumber;
		this.intentionOffset = intentionOffset;
		this.topic = topic;
		this.clientId = clientId;
		this.clientNonce = clientNonce;
		this.payload = payload;
	}

	public byte[] serialize() {
		byte[] buffer = new byte[_serializedSize()];
		ByteBuffer wrapper = ByteBuffer.wrap(buffer);
		_serializeInto(wrapper);
		return buffer;
	}

	public int serializedSize() {
		return _serializedSize();
	}

	public void serializeInto(ByteBuffer buffer) {
		_serializeInto(buffer);
	}


	private int _serializedSize() {
		return Byte.BYTES
				+ Long.BYTES
				+ Long.BYTES
				+ this.topic.serializedSize()
				+ (2 * Long.BYTES)
				+ Long.BYTES
				+ this.payload.serializedSize()
		;
	}

	private void _serializeInto(ByteBuffer buffer) {
		buffer
			.put((byte)this.type.ordinal())
			.putLong(this.termNumber)
			.putLong(this.intentionOffset)
		;
		this.topic.serializeInto(buffer);
		buffer
			.putLong(this.clientId.getMostSignificantBits()).putLong(this.clientId.getLeastSignificantBits())
			.putLong(this.clientNonce)
		;
		this.payload.serializeInto(buffer);
	}

	@Override
	public boolean equals(Object arg0) {
		boolean isEqual = (this == arg0);
		if (!isEqual && (null != arg0) && (this.getClass() == arg0.getClass())) {
			Intention object = (Intention) arg0;
			isEqual = (this.type == object.type)
					&& (this.termNumber == object.termNumber)
					&& (this.intentionOffset == object.intentionOffset)
					&& (this.topic.equals(object.topic))
					&& (this.clientId.equals(object.clientId))
					&& (this.clientNonce == object.clientNonce)
					&& (this.payload.equals(object.payload))
			;
		}
		return isEqual;
	}

	@Override
	public int hashCode() {
		// We will just use the most basic data intention offset and term number are probably sufficient, on their own.
		return this.type.ordinal()
				^ (int)this.termNumber
				^ (int)this.intentionOffset
		;
	}

	@Override
	public String toString() {
		return "Intention(type=" + this.type + ", term=" + this.termNumber + ", offset=" + this.intentionOffset +")";
	}


	public static enum Type {
		/**
		 * 0 is common in invalid data so it is reserved as the invalid type.
		 */
		INVALID,
		/**
		 * Creates the named topic, generating an INVALID effect if it already exists.
		 */
		TOPIC_CREATE,
		/**
		 * Destroys the named topic, generating an INVALID effect if it doesn't exist.
		 */
		TOPIC_DESTROY,
		/**
		 * Encodes a key and value as raw byte[].
		 */
		KEY_PUT,
		/**
		 * Encodes a key as raw byte[].
		 */
		KEY_DELETE,
		/**
		 * The payload of this message is the serialized new config.
		 */
		CONFIG_CHANGE,
		/**
		 * The payload for this is the same as PUT.  The unique thing about this is that executing it creates 2 PUT consequences.
		 */
		STUTTER,
	}
}
