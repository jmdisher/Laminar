<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="all" name="Laminar-integration">
	<property name="global.build" value="${basedir}/../build"/>
	<property name="global.lib" value="${basedir}/../lib"/>
	<property name="global.jars" value="${basedir}/../jars"/>
	<property name="global.products" value="${basedir}/../products"/>
	<property name="global.jars.common" value="${global.jars}/common.jar"/>
	<property name="global.jars.client" value="${global.jars}/client.jar"/>
	<property name="global.jars.bridge" value="${global.jars}/bridge.jar"/>
	<property name="global.jars.server" value="${global.jars}/server.jar"/>
	<property name="global.products.Laminar" value="${global.products}/Laminar.jar"/>
	<property name="global.products.LaminarClientLib" value="${global.products}/Laminar-clientlib.jar"/>
	<property name="global.products.ConfigBuilder" value="${global.products}/ConfigBuilder.jar"/>
	<property name="global.products.ChatServerExample" value="${global.products}/ChatServerExample.jar"/>

	<property name="local.src" value="${basedir}/src"/>
	<property name="local.test" value="${basedir}/test"/>
	<property name="local.build" value="${basedir}/build"/>
	<property name="local.build.src" value="${local.build}/src"/>
	<property name="local.build.test" value="${local.build}/test"/>
	<property name="local.testreports" value="${local.build}/testreports"/>
	<property name="local.testdir" value="${local.build}/testdir"/>

	<!-- Set this property to run a specific test. -->
	<property name="test" value="Test*" />
	<property name="perf" value="Perf*" />
	<property name="heap" value="32m"/>

	<target name="all" >
		<antcall target="clean" />
		<antcall target="build" />
		<antcall target="test" />
	</target>

	<target name="clean" >
		<echo message="Cleaning all in ${local.build}..."/>
		<delete dir="${local.build}"/>
	</target>

	<target name="build" >
		<!-- We will build test in both "build" and "test" targets -->
		<antcall target="build_src" />
		<antcall target="build_test" />
	</target>

	<target name="test" >
		<!-- We will build test in both "build" and "test" targets -->
		<antcall target="build_test" />
		<antcall target="run_test" />
	</target>

	<target name="perf" >
		<!-- We will build test in this target, as well, since we depend on it -->
		<antcall target="build_test" />
		<antcall target="run_perf" />
	</target>

	<target name="build_src">
		<!-- Integration is just for tools and integration testing so it produces no intermediary jars - just the final products -->
		<echo message="Building source ${local.src}..."/>
		<mkdir dir="${local.build.src}"/>
		<javac
			srcdir="${local.src}"
			destdir="${local.build.src}"
			includeantruntime="false"
			debug="on" debuglevel="source,lines,vars"
			source="8"
			target="8"
		>
			<classpath>
				<pathelement location="${global.jars.common}"/>
				<pathelement location="${global.jars.client}"/>
			</classpath>
		</javac>
		
		<jar destfile="${global.products.Laminar}">
			<zipfileset src="${global.jars.common}"/>
			<zipfileset src="${global.jars.bridge}"/>
			<zipfileset src="${global.jars.server}"/>
			<manifest>
				<attribute name="Main-Class" value="com.jeffdisher.laminar.Laminar"/>
			</manifest>
		</jar>
		<jar destfile="${global.products.LaminarClientLib}">
			<zipfileset src="${global.jars.common}"/>
			<zipfileset src="${global.jars.client}"/>
		</jar>
		<jar destfile="${global.products.ConfigBuilder}">
			<fileset dir="${local.build.src}"/>
			<zipfileset src="${global.jars.common}"/>
			<zipfileset src="${global.jars.client}"/>
			<manifest>
				<attribute name="Main-Class" value="com.jeffdisher.laminar.tools.ConfigBuilder"/>
			</manifest>
		</jar>
		<jar destfile="${global.products.ChatServerExample}">
			<fileset dir="${local.build.src}"/>
			<zipfileset src="${global.jars.common}"/>
			<zipfileset src="${global.jars.client}"/>
			<manifest>
				<attribute name="Main-Class" value="com.jeffdisher.laminar.examples.ChatServerExample"/>
			</manifest>
		</jar>
	</target>

	<target name="build_test">
		<echo message="Building tests ${local.test}..."/>
		<mkdir dir="${local.build.test}"/>
		<javac
			srcdir="${local.test}"
			destdir="${local.build.test}"
			includeantruntime="false"
			debug="on" debuglevel="source,lines,vars"
			source="8"
			target="8"
		>
			<classpath>
				<pathelement location="${global.lib}/junit-4.12.jar"/>
				<pathelement location="${global.products.LaminarClientLib}"/>
				<!-- Note that some integration tests want to use the packager and test contracts. -->
				<pathelement location="${global.jars.bridge}"/>
			</classpath>
		</javac>
	</target>

	<target name="run_test">
		<echo message="Running tests in ${local.test}..."/>
		<mkdir dir="${local.testreports}" />
		<mkdir dir="${local.testdir}" />
		<!-- Note that the tests currently must be run sequentially since they make assumptions about binding ports. -->
		<!-- We want "showoutput" so we can diagnose issues found in test runs. -->
		<junit printsummary="on" showoutput="true" haltonfailure="true" fork="true" threads="1" maxmemory="${heap}" dir="${local.testdir}">
			<classpath>
				<pathelement location="${global.lib}/junit-4.12.jar"/>
				<pathelement location="${global.lib}/hamcrest-all-1.3.jar"/>
				<pathelement location="${global.products.LaminarClientLib}"/>
				<!-- Note that some integration tests want to use the packager and test contracts. -->
				<pathelement location="${global.jars.bridge}"/>
				<pathelement location="${local.build.test}" />
			</classpath>
			<env key="WRAPPER_SERVER_JAR" value="${global.products.Laminar}" />
			<env key="CONFIG_BUILDER_JAR" value="${global.products.ConfigBuilder}" />
			<env key="CHAT_CLIENT_JAR" value="${global.products.ChatServerExample}" />
			<formatter type="plain" usefile="false" />
			<batchtest todir="${build.testreports}">
				<fileset dir="${local.test}" includes="**/${test}.java" />
			</batchtest>
		</junit>
	</target>

	<target name="run_perf">
		<echo message="Running performance in ${local.test}..."/>
		<mkdir dir="${local.testreports}" />
		<mkdir dir="${local.testdir}" />
		<!-- We use JUnit as the entry-point for performance tests and we need to run them single-threaded so different perf tests don't fight over CPU resources. -->
		<!-- We want "showoutput" since that is where we write out collected data (and this target is only run when explicitly requested). -->
		<junit printsummary="on" showoutput="true" haltonfailure="true" fork="true" threads="1" maxmemory="${heap}" dir="${local.testdir}">
			<classpath>
				<pathelement location="${global.lib}/junit-4.12.jar"/>
				<pathelement location="${global.lib}/hamcrest-all-1.3.jar"/>
				<pathelement location="${global.products.LaminarClientLib}"/>
				<!-- Note that some integration tests want to use the packager and test contracts. -->
				<pathelement location="${global.jars.bridge}"/>
				<pathelement location="${local.build.test}" />
			</classpath>
			<env key="WRAPPER_SERVER_JAR" value="${global.products.Laminar}" />
			<formatter type="plain" usefile="false" />
			<batchtest todir="${build.testreports}">
				<fileset dir="${local.test}" includes="**/${perf}.java" />
			</batchtest>
		</junit>
	</target>
</project>

